package com.montreal.msiav_bh.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * Servi√ßo de atualiza√ß√£o autom√°tica inteligente do cache
 * Garante que os dados estejam sempre completos e atualizados
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class VehicleCacheAutoUpdateService {

    private final VehicleCacheService vehicleCacheService;
    private final VehicleDataFetchService vehicleDataFetchService;
    private final VehicleApiService vehicleApiService;
    
    @Value("${vehicle.cache.auto-update.enabled:true}")
    private boolean autoUpdateEnabled;
    
    @Value("${vehicle.cache.auto-update.on-startup:true}")
    private boolean updateOnStartup;
    
    @Value("${vehicle.cache.auto-update.if-incomplete:true}")
    private boolean updateIfIncomplete;
    
    /**
     * Executa ao iniciar a aplica√ß√£o
     */
    @PostConstruct
    public void initializeCache() {
        if (!autoUpdateEnabled) {
            log.info("Auto-update desabilitado via configura√ß√£o");
            return;
        }
        
        log.info("=== VERIFICANDO CACHE NA INICIALIZA√á√ÉO ===");
        
        try {
            VehicleCacheService.CacheStatus status = vehicleCacheService.getCacheStatus();
            
            // Cen√°rio 1: Cache vazio - sempre atualizar
            if (status.getTotalRecords() == 0) {
                log.warn("‚ö†Ô∏è Cache vazio detectado - iniciando carga completa");
                performCompleteUpdate();
                return;
            }
            
            // Cen√°rio 2: Cache com dados incompletos
            if (updateIfIncomplete) {
                long incompleteCount = vehicleCacheService.getVehiclesWithIncompleteData().size();
                if (incompleteCount > 0) {
                    log.warn("‚ö†Ô∏è Encontrados {} ve√≠culos com dados incompletos", incompleteCount);
                    
                    // Se mais de 10% est√° incompleto, fazer atualiza√ß√£o completa
                    double percentIncomplete = (double) incompleteCount / status.getTotalRecords() * 100;
                    if (percentIncomplete > 10) {
                        log.info("{}% dos dados est√£o incompletos - fazendo atualiza√ß√£o completa", 
                            String.format("%.1f", percentIncomplete));
                        performCompleteUpdate();
                        return;
                    }
                }
            }
            
            // Cen√°rio 3: Cache muito antigo (mais de 24 horas)
            if (status.getMinutesSinceLastSync() > 1440) { // 24 horas
                log.warn("‚ö†Ô∏è Cache com mais de 24 horas - atualizando");
                performCompleteUpdate();
                return;
            }
            
            // Cen√°rio 4: For√ßar atualiza√ß√£o na inicializa√ß√£o (configur√°vel)
            if (updateOnStartup) {
                log.info("Atualiza√ß√£o na inicializa√ß√£o habilitada - atualizando cache");
                performCompleteUpdate();
                return;
            }
            
            log.info("‚úÖ Cache v√°lido e completo - {} registros, √∫ltima atualiza√ß√£o h√° {} minutos",
                status.getTotalRecords(), status.getMinutesSinceLastSync());
                
        } catch (Exception e) {
            log.error("Erro ao verificar cache na inicializa√ß√£o: {}", e.getMessage());
        }
    }
    
    /**
     * Atualiza√ß√£o agendada - executa todos os dias √†s 6h da manh√£
     */
    @Scheduled(cron = "${vehicle.cache.auto-update.cron:0 0 6 * * *}")
    public void scheduledCacheUpdate() {
        if (!autoUpdateEnabled) {
            return;
        }
        
        log.info("=== ATUALIZA√á√ÉO AGENDADA DO CACHE ===");
        performCompleteUpdate();
    }
    
    /**
     * Verifica a cada hora se precisa atualizar
     */
    @Scheduled(fixedDelay = 3600000) // 1 hora
    public void checkCacheHealth() {
        if (!autoUpdateEnabled) {
            return;
        }
        
        try {
            VehicleCacheService.CacheStatus status = vehicleCacheService.getCacheStatus();
            
            // Se o cache est√° muito desatualizado, atualizar
            if (status.getMinutesSinceLastSync() > 360) { // 6 horas
                log.info("Cache desatualizado ({} horas) - iniciando atualiza√ß√£o", 
                    status.getMinutesSinceLastSync() / 60);
                performCompleteUpdate();
            }
            
        } catch (Exception e) {
            log.error("Erro ao verificar sa√∫de do cache: {}", e.getMessage());
        }
    }
    
    /**
     * Realiza atualiza√ß√£o completa com dados enriquecidos
     */
    private void performCompleteUpdate() {
        try {
            log.info("üîÑ Iniciando atualiza√ß√£o completa do cache com dados enriquecidos");
            
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(30);
            
            // Usar o servi√ßo otimizado que j√° traz dados completos
            vehicleApiService.forceRefreshFromApi();
            
            // Verificar resultado
            VehicleCacheService.CacheStatus newStatus = vehicleCacheService.getCacheStatus();
            long incompleteAfter = vehicleCacheService.getVehiclesWithIncompleteData().size();
            
            log.info("‚úÖ Atualiza√ß√£o completa finalizada:");
            log.info("   - Total de registros: {}", newStatus.getTotalRecords());
            log.info("   - Registros incompletos: {}", incompleteAfter);
            log.info("   - Taxa de completude: {}%", 
                String.format("%.1f", (1 - (double)incompleteAfter/newStatus.getTotalRecords()) * 100));
                
        } catch (Exception e) {
            log.error("‚ùå Falha na atualiza√ß√£o autom√°tica do cache: {}", e.getMessage());
        }
    }
    
    /**
     * M√©todo para for√ßar atualiza√ß√£o manual
     */
    public void forceUpdate() {
        log.info("Atualiza√ß√£o manual solicitada");
        performCompleteUpdate();
    }
}